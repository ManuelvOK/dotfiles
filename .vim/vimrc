"    __  __       _         __     ___                                  _
"   |  \/  | __ _| | _____  \ \   / (_)_ __ ___     __ _ _ __ ___  __ _| |_
"   | |\/| |/ _` | |/ / _ \  \ \ / /| | '_ ` _ \   / _` | '__/ _ \/ _` | __|
"   | |  | | (_| |   <  __/   \ V / | | | | | | | | (_| | | |  __/ (_| | |_
"   |_|  |_|\__,_|_|\_\___|    \_/  |_|_| |_| |_|  \__, |_|  \___|\__,_|\__|
"                                                  |___/
"                                           _       _
"                          __ _  __ _  __ _(_)_ __ | |
"                         / _` |/ _` |/ _` | | '_ \| |
"                        | (_| | (_| | (_| | | | | |_|
"                         \__,_|\__, |\__,_|_|_| |_(_)
"                               |___/


set nocompatible

" Plugin management (I use Vundle) {{{1
filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim

call vundle#begin()
" Plugin sources {{{2
Plugin 'VundleVim/Vundle.vim'
"Plugin 'vim-syntastic/syntastic'
Plugin 'dense-analysis/ale'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-unimpaired'
Plugin 'justinmk/vim-syntax-extra'
Plugin 'pboettch/vim-highlight-cursor-words'
Plugin 'lodifice/omnitags.vim'
Plugin 'lodifice/pathfinder.vim'
Plugin 'lodifice/guillotine.vim'
Plugin 'lodifice/panzer.vim'
Plugin 'lodifice/mzview.vim'
Plugin 'lodifice/wombat256.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'kdrakon/AnswerSetProgramming-VIM-Syntax-Highlighting'
Plugin 'FromtonRouge/OmniCppComplete'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'preservim/nerdtree'
"Plugin 'preservim/vim-markdown'
Plugin 'krisajenkins/vim-projectlocal'
Plugin 'wsdjeg/vim-fetch'
Plugin 'inkarkat/vim-ingo-library'
Plugin 'inkarkat/vim-OnSyntaxChange'
Plugin 'pangloss/vim-javascript'
Plugin 'leafgarland/typescript-vim'
" }}}2
call vundle#end()
" }}}1

filetype plugin indent on
syntax on

" General config {{{1
" Disable swapping {{{2
set nobackup
set nowritebackup
set noswapfile

" Sanity defaults {{{2
set clipboard=      " Welches Rindvieh hat `autoselect` als Default eingestellt?
"set clipboard=unnamedplus

" Tabs and spaces {{{2
set expandtab       " expand tabs to spaces
set tabstop=4       " each tab is 4 spaces
set shiftwidth=4    " use 4 spaces for each indent level
set shiftround      " orientate indent on shiftwidth

" Indentation {{{2
set cino+=(0

" Search {{{2
set hlsearch        " always highlight search results
set incsearch       " search incrementally
set ignorecase      " ignore case when searching
set smartcase       " ignore ignorecase when uppercase letter in search string

" History & undo levels
set history=777     " command line history
set undolevels=777  " normal mode history

" Buffer management {{{2
set hidden          " Make it possible to switch buffers without writing
set tabpagemax=25   " display up to 25 tabpages

" controls {{{2
set mouse=a " use mouse and backspace
set ttymouse=sgr

" break a line
nnoremap K i<CR><Esc>

" misc {{{2
set wildignore+=*/.git/*,*/build/*,*.d,*.o,main,*/venv/*,*/__pycache__/*,*/.mypy_cache/*,*.pdf,*.out,*.toc,*.fdb_latexmk,*.aux,*.log,*.fls,*/target/*,*/node_modules/* ",*/doc/*   " ignore these filetypes

" Completion {{{1
" Command line completion {{{2
set wildmenu                    " Show possible completions
set wildmode=longest:full,full  " Make completion behave like in zsh

" omnicompletion {{{2
set completeopt=menu,preview    " Show preview on selected entry
autocmd CompleteDone * pclose   " close preview when completion is done
autocmd BufNewFile,BufRead,BufEnter *.cpp,*.hpp,*.cc set omnifunc=omni#cpp#complete#Main
"set tags+=~/.vim/tags/tags
set tags=tags;/

" Folding {{{1
set nofoldenable
let g:xml_syntax_folding=1      " proper xml folding
let g:javaScript_fold=1         " enable javascript folding
au FileType javascript setlocal foldmethod=syntax
let g:markdown_folding=1        " enable markdown folding
au FileType markdown setlocal foldmethod=expr
"}}}1

" Visuals {{{1
" Orientation {{{2
set number              " enable line numbers (current line absolute)
set relativenumber      " use relative line numbers
set ruler               " always show position in file
set scrolloff=5         " number of lines always below/above cursor
set wrap linebreak      " wrap on word bounds
set breakindent         " indent wrapped lines as previous line
set showcmd             " show currently pending command string
set cursorline          " highlight current line
set colorcolumn=100     " highlight column 100

" whitespaces {{{2
set list                        " show Whitespaces
set listchars=tab:\ \ ,trail:Â·  " show tabs as tabs and trailing spaces as dots

" Color scheme {{{2
set t_Co=256
silent! color wombat256mod      " Use wombat TODO: fork for following settings
highlight LineNr ctermbg=234
highlight TabLineFill ctermfg=234
highlight Search ctermbg=none
highlight Comment ctermfg=241
highligh ColorColumn ctermbg=233

" Font {{{2
set guifont="Fantasque Sans Mono 12"

" Plugin configuration {{{1
" Guillotine.vim {{{2
augroup guillotine
    autocmd!
    autocmd BufEnter * if exists(":ToggleHeaderSource") | execute "nmap <buffer> ga :ToggleHeaderSource<cr>" | endif
augroup END

" CtrlP {{{2
let g:ctrlp_switch_buffer       = 0                     " do not jump if already open
let g:ctrlp_show_hidden         = 1                     " show hidden files
let g:ctrlp_clear_cache_on_exit = 0                     " do not clear cache at exit
let g:ctrlp_cache_dir           = $HOME.'/.cache/ctrlp' " where to save the cache
let g:ctrlp_root_markers        = ["tags", ".git"]      " proper pathfinding
let g:ctrlp_max_depth           = 20
let g:ctrlp_max_files           = 0
let g:ctrlp_prompt_mappings     = {
            \   'PrtClearCache()':  ['<C-I>'],
            \ }                                         " reload with Ctrl-I

" Pathfinder.vim {{{2
let g:pathfinder_targets = ["compile_commands.json", "tags", ".git"] " pathfinder heuristic

" Mzview.vim {{{2
" goto position in pdf
nnoremap gp :SynctexForward<CR>
let g:tex_flavor = "latex" " for mzview to work always use filetype tex

" NERDTree {{{2
" toggle NERDTree
function! ToggleNERDTree()
    if @% == ""
        NERDTreeToggle
    else
        NERDTreeFind
    endif
endfunction

nnoremap <C-K> :call ToggleNERDTree()<CR>

" Syntastic {{{2
let g:syntastic_c_no_default_include_dirs = 1                       " get rid of -I..
let g:syntastic_cpp_no_default_include_dirs = 1                     " get rid of -I..
"let g:syntastic_c_include_dirs = [ 'include', 'inc', 'test/inc', 'lib']    " where to find c headers
"let g:syntastic_cpp_include_dirs = [ 'include', 'inc' , 'test/inc', 'lib'] " where to find c++ headers
"let g:syntastic_cpp_check_header = 1                                " check header files
"let g:syntastic_cpp_compiler_options = ' -std=c++2a'                " use c++17

let g:syntastic_quiet_messages = { "regex" : 'pragma once' }        " ignore pragma warnings
let g:syntastic_always_populate_loc_list = 1

let g:syntastic_cpp_checkers = ["clang_check", "clang_tidy"]
let g:syntastic_cpp_clang_check_post_args = ""
let g:syntastic_cpp_clang_tidy_post_args = ""

let g:syntastic_lua_checkers = ["luac"]
let g:syntastic_lua_luacheck_args = "--no-unused-args"

let g:syntastic_python_checkers = ["mypy", "pycodestyle"]
let g:syntastic_javascript_checkers = ["jshint","jscs"]

" Ale {{{2
let g:ale_lint_on_text_changed = 'never'    " do not check on changed text
let g:ale_lint_on_insert_leave = 0          " do not check when leaving insert mode

let g:ale_linters_explicit = 1  "only run configured linters
" configure linters
let g:ale_linters = {
\   "c"         : ["clang", "clangtidy"],
\   "cpp"       : ["clang", "clangtidy"],
\   "javascript": ["jshint", "jscs"],
\   "lua"       : ["luac"],
\   "python"    : ["mypy", "pycodestyle"],
\   "sh"        : ["shellcheck"],
\   "typescript": ["tsserver"],
\}

" InSyntaxChange {{{2

autocmd FileType python call OnSyntaxChange#Install('Comment', '^pythonComment$', 0, 'a')
autocmd FileType python autocmd User SyntaxCommentEnterA setlocal textwidth=72
autocmd FileType python autocmd User SyntaxCommentLeaveA setlocal textwidth=99

" OmniCppComplete {{{2
let OmniCpp_MayCompleteDot = 0      " Do not automatically start completion on dot
let OmniCpp_MayCompleteArrow = 0    " Do not automatically start completion on arrow

" Language specific configuration {{{1
" git commit {{{2
au FileType gitcommit setlocal spelllang=en_us spell textwidth=68
au FileType yaml      setlocal textwidth=80 colorcolumn=81
au FileType markdown  setlocal spelllang=en_us spell textwidth=80 colorcolumn=81
au FileType python    setlocal textwidth=99 colorcolumn=100
au FileType html      setlocal shiftwidth=2 tabstop=2


" Automations {{{1
" OnWrite {{{2
autocmd BufWritePre * :%s/\s\+$//e  " remove trailing whitespaces

" Allow projectspecific .vimrcs but safely
set exrc
let g:projectlocal_project_markers = ['compile_commands.json']
set secure

function! SynGroup()
    let l:s = synID(line('.'), col('.'), 1)
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

